/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.tmp.Command', null, global);
goog.exportSymbol('proto.tmp.Commands', null, global);
goog.exportSymbol('proto.tmp.CreateRoomRequest', null, global);
goog.exportSymbol('proto.tmp.CreateRoomResponse', null, global);
goog.exportSymbol('proto.tmp.DebugRequest', null, global);
goog.exportSymbol('proto.tmp.DebugResponse', null, global);
goog.exportSymbol('proto.tmp.DeleteRoomRequest', null, global);
goog.exportSymbol('proto.tmp.DeleteRoomResponse', null, global);
goog.exportSymbol('proto.tmp.EndOfLifeSetting', null, global);
goog.exportSymbol('proto.tmp.IdCommand', null, global);
goog.exportSymbol('proto.tmp.ListRoomRequest', null, global);
goog.exportSymbol('proto.tmp.ListRoomResponse', null, global);
goog.exportSymbol('proto.tmp.RoomSetting', null, global);
goog.exportSymbol('proto.tmp.RoomSummary', null, global);
goog.exportSymbol('proto.tmp.RoomSummary.HistorySummary', null, global);
goog.exportSymbol('proto.tmp.StandAloneRoomServerSetting', null, global);
goog.exportSymbol('proto.tmp.TickCommand', null, global);
goog.exportSymbol('proto.tmp.TickSetting', null, global);
goog.exportSymbol('proto.tmp.WriterCommand', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tmp.Commands = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tmp.Commands.repeatedFields_, null);
};
goog.inherits(proto.tmp.Commands, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tmp.Commands.displayName = 'proto.tmp.Commands';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tmp.Command = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.tmp.Command.oneofGroups_);
};
goog.inherits(proto.tmp.Command, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tmp.Command.displayName = 'proto.tmp.Command';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tmp.TickCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tmp.TickCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tmp.TickCommand.displayName = 'proto.tmp.TickCommand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tmp.IdCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tmp.IdCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tmp.IdCommand.displayName = 'proto.tmp.IdCommand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tmp.WriterCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tmp.WriterCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tmp.WriterCommand.displayName = 'proto.tmp.WriterCommand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tmp.StandAloneRoomServerSetting = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tmp.StandAloneRoomServerSetting, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tmp.StandAloneRoomServerSetting.displayName = 'proto.tmp.StandAloneRoomServerSetting';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tmp.CreateRoomRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tmp.CreateRoomRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tmp.CreateRoomRequest.displayName = 'proto.tmp.CreateRoomRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tmp.CreateRoomResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tmp.CreateRoomResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tmp.CreateRoomResponse.displayName = 'proto.tmp.CreateRoomResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tmp.DeleteRoomRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tmp.DeleteRoomRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tmp.DeleteRoomRequest.displayName = 'proto.tmp.DeleteRoomRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tmp.DeleteRoomResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tmp.DeleteRoomResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tmp.DeleteRoomResponse.displayName = 'proto.tmp.DeleteRoomResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tmp.ListRoomRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tmp.ListRoomRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tmp.ListRoomRequest.displayName = 'proto.tmp.ListRoomRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tmp.ListRoomResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tmp.ListRoomResponse.repeatedFields_, null);
};
goog.inherits(proto.tmp.ListRoomResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tmp.ListRoomResponse.displayName = 'proto.tmp.ListRoomResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tmp.RoomSummary = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tmp.RoomSummary, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tmp.RoomSummary.displayName = 'proto.tmp.RoomSummary';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tmp.RoomSummary.HistorySummary = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tmp.RoomSummary.HistorySummary, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tmp.RoomSummary.HistorySummary.displayName = 'proto.tmp.RoomSummary.HistorySummary';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tmp.DebugRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.tmp.DebugRequest.oneofGroups_);
};
goog.inherits(proto.tmp.DebugRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tmp.DebugRequest.displayName = 'proto.tmp.DebugRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tmp.DebugResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.tmp.DebugResponse.oneofGroups_);
};
goog.inherits(proto.tmp.DebugResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tmp.DebugResponse.displayName = 'proto.tmp.DebugResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tmp.RoomSetting = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tmp.RoomSetting, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tmp.RoomSetting.displayName = 'proto.tmp.RoomSetting';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tmp.TickSetting = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tmp.TickSetting, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tmp.TickSetting.displayName = 'proto.tmp.TickSetting';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tmp.EndOfLifeSetting = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tmp.EndOfLifeSetting, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tmp.EndOfLifeSetting.displayName = 'proto.tmp.EndOfLifeSetting';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tmp.Commands.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tmp.Commands.prototype.toObject = function(opt_includeInstance) {
  return proto.tmp.Commands.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tmp.Commands} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tmp.Commands.toObject = function(includeInstance, msg) {
  var f, obj = {
    commandsList: jspb.Message.toObjectList(msg.getCommandsList(),
    proto.tmp.Command.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tmp.Commands}
 */
proto.tmp.Commands.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tmp.Commands;
  return proto.tmp.Commands.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tmp.Commands} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tmp.Commands}
 */
proto.tmp.Commands.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tmp.Command;
      reader.readMessage(value,proto.tmp.Command.deserializeBinaryFromReader);
      msg.addCommands(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tmp.Commands.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tmp.Commands.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tmp.Commands} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tmp.Commands.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommandsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.tmp.Command.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Command commands = 1;
 * @return {!Array<!proto.tmp.Command>}
 */
proto.tmp.Commands.prototype.getCommandsList = function() {
  return /** @type{!Array<!proto.tmp.Command>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tmp.Command, 1));
};


/** @param {!Array<!proto.tmp.Command>} value */
proto.tmp.Commands.prototype.setCommandsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.tmp.Command=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tmp.Command}
 */
proto.tmp.Commands.prototype.addCommands = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.tmp.Command, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.tmp.Commands.prototype.clearCommandsList = function() {
  this.setCommandsList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.tmp.Command.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.tmp.Command.CommandCase = {
  COMMAND_NOT_SET: 0,
  TICK_COMMAND: 1,
  ID_COMMAND: 2,
  WRITER_COMMAND: 3
};

/**
 * @return {proto.tmp.Command.CommandCase}
 */
proto.tmp.Command.prototype.getCommandCase = function() {
  return /** @type {proto.tmp.Command.CommandCase} */(jspb.Message.computeOneofCase(this, proto.tmp.Command.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tmp.Command.prototype.toObject = function(opt_includeInstance) {
  return proto.tmp.Command.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tmp.Command} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tmp.Command.toObject = function(includeInstance, msg) {
  var f, obj = {
    tickCommand: (f = msg.getTickCommand()) && proto.tmp.TickCommand.toObject(includeInstance, f),
    idCommand: (f = msg.getIdCommand()) && proto.tmp.IdCommand.toObject(includeInstance, f),
    writerCommand: (f = msg.getWriterCommand()) && proto.tmp.WriterCommand.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tmp.Command}
 */
proto.tmp.Command.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tmp.Command;
  return proto.tmp.Command.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tmp.Command} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tmp.Command}
 */
proto.tmp.Command.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tmp.TickCommand;
      reader.readMessage(value,proto.tmp.TickCommand.deserializeBinaryFromReader);
      msg.setTickCommand(value);
      break;
    case 2:
      var value = new proto.tmp.IdCommand;
      reader.readMessage(value,proto.tmp.IdCommand.deserializeBinaryFromReader);
      msg.setIdCommand(value);
      break;
    case 3:
      var value = new proto.tmp.WriterCommand;
      reader.readMessage(value,proto.tmp.WriterCommand.deserializeBinaryFromReader);
      msg.setWriterCommand(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tmp.Command.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tmp.Command.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tmp.Command} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tmp.Command.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTickCommand();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.tmp.TickCommand.serializeBinaryToWriter
    );
  }
  f = message.getIdCommand();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.tmp.IdCommand.serializeBinaryToWriter
    );
  }
  f = message.getWriterCommand();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.tmp.WriterCommand.serializeBinaryToWriter
    );
  }
};


/**
 * optional TickCommand tick_command = 1;
 * @return {?proto.tmp.TickCommand}
 */
proto.tmp.Command.prototype.getTickCommand = function() {
  return /** @type{?proto.tmp.TickCommand} */ (
    jspb.Message.getWrapperField(this, proto.tmp.TickCommand, 1));
};


/** @param {?proto.tmp.TickCommand|undefined} value */
proto.tmp.Command.prototype.setTickCommand = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.tmp.Command.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.tmp.Command.prototype.clearTickCommand = function() {
  this.setTickCommand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tmp.Command.prototype.hasTickCommand = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional IdCommand id_command = 2;
 * @return {?proto.tmp.IdCommand}
 */
proto.tmp.Command.prototype.getIdCommand = function() {
  return /** @type{?proto.tmp.IdCommand} */ (
    jspb.Message.getWrapperField(this, proto.tmp.IdCommand, 2));
};


/** @param {?proto.tmp.IdCommand|undefined} value */
proto.tmp.Command.prototype.setIdCommand = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.tmp.Command.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.tmp.Command.prototype.clearIdCommand = function() {
  this.setIdCommand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tmp.Command.prototype.hasIdCommand = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional WriterCommand writer_command = 3;
 * @return {?proto.tmp.WriterCommand}
 */
proto.tmp.Command.prototype.getWriterCommand = function() {
  return /** @type{?proto.tmp.WriterCommand} */ (
    jspb.Message.getWrapperField(this, proto.tmp.WriterCommand, 3));
};


/** @param {?proto.tmp.WriterCommand|undefined} value */
proto.tmp.Command.prototype.setWriterCommand = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.tmp.Command.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.tmp.Command.prototype.clearWriterCommand = function() {
  this.setWriterCommand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tmp.Command.prototype.hasWriterCommand = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tmp.TickCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.tmp.TickCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tmp.TickCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tmp.TickCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    randomSeed: msg.getRandomSeed_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tmp.TickCommand}
 */
proto.tmp.TickCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tmp.TickCommand;
  return proto.tmp.TickCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tmp.TickCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tmp.TickCommand}
 */
proto.tmp.TickCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRandomSeed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tmp.TickCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tmp.TickCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tmp.TickCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tmp.TickCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRandomSeed_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes random_seed = 1;
 * @return {!(string|Uint8Array)}
 */
proto.tmp.TickCommand.prototype.getRandomSeed = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes random_seed = 1;
 * This is a type-conversion wrapper around `getRandomSeed()`
 * @return {string}
 */
proto.tmp.TickCommand.prototype.getRandomSeed_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRandomSeed()));
};


/**
 * optional bytes random_seed = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRandomSeed()`
 * @return {!Uint8Array}
 */
proto.tmp.TickCommand.prototype.getRandomSeed_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRandomSeed()));
};


/** @param {!(string|Uint8Array)} value */
proto.tmp.TickCommand.prototype.setRandomSeed = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tmp.IdCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.tmp.IdCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tmp.IdCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tmp.IdCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    oldId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    newId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tmp.IdCommand}
 */
proto.tmp.IdCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tmp.IdCommand;
  return proto.tmp.IdCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tmp.IdCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tmp.IdCommand}
 */
proto.tmp.IdCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOldId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tmp.IdCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tmp.IdCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tmp.IdCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tmp.IdCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOldId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNewId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string old_id = 1;
 * @return {string}
 */
proto.tmp.IdCommand.prototype.getOldId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.tmp.IdCommand.prototype.setOldId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string new_id = 2;
 * @return {string}
 */
proto.tmp.IdCommand.prototype.getNewId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.tmp.IdCommand.prototype.setNewId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tmp.WriterCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.tmp.WriterCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tmp.WriterCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tmp.WriterCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    command: msg.getCommand_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tmp.WriterCommand}
 */
proto.tmp.WriterCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tmp.WriterCommand;
  return proto.tmp.WriterCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tmp.WriterCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tmp.WriterCommand}
 */
proto.tmp.WriterCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCommand(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tmp.WriterCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tmp.WriterCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tmp.WriterCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tmp.WriterCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCommand_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.tmp.WriterCommand.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.tmp.WriterCommand.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes command = 2;
 * @return {!(string|Uint8Array)}
 */
proto.tmp.WriterCommand.prototype.getCommand = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes command = 2;
 * This is a type-conversion wrapper around `getCommand()`
 * @return {string}
 */
proto.tmp.WriterCommand.prototype.getCommand_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCommand()));
};


/**
 * optional bytes command = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCommand()`
 * @return {!Uint8Array}
 */
proto.tmp.WriterCommand.prototype.getCommand_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCommand()));
};


/** @param {!(string|Uint8Array)} value */
proto.tmp.WriterCommand.prototype.setCommand = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tmp.StandAloneRoomServerSetting.prototype.toObject = function(opt_includeInstance) {
  return proto.tmp.StandAloneRoomServerSetting.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tmp.StandAloneRoomServerSetting} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tmp.StandAloneRoomServerSetting.toObject = function(includeInstance, msg) {
  var f, obj = {
    port: jspb.Message.getFieldWithDefault(msg, 1, 0),
    roomSetting: (f = msg.getRoomSetting()) && proto.tmp.RoomSetting.toObject(includeInstance, f),
    backupFile: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tmp.StandAloneRoomServerSetting}
 */
proto.tmp.StandAloneRoomServerSetting.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tmp.StandAloneRoomServerSetting;
  return proto.tmp.StandAloneRoomServerSetting.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tmp.StandAloneRoomServerSetting} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tmp.StandAloneRoomServerSetting}
 */
proto.tmp.StandAloneRoomServerSetting.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPort(value);
      break;
    case 2:
      var value = new proto.tmp.RoomSetting;
      reader.readMessage(value,proto.tmp.RoomSetting.deserializeBinaryFromReader);
      msg.setRoomSetting(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBackupFile(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tmp.StandAloneRoomServerSetting.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tmp.StandAloneRoomServerSetting.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tmp.StandAloneRoomServerSetting} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tmp.StandAloneRoomServerSetting.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPort();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRoomSetting();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.tmp.RoomSetting.serializeBinaryToWriter
    );
  }
  f = message.getBackupFile();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int32 port = 1;
 * @return {number}
 */
proto.tmp.StandAloneRoomServerSetting.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.tmp.StandAloneRoomServerSetting.prototype.setPort = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional RoomSetting room_setting = 2;
 * @return {?proto.tmp.RoomSetting}
 */
proto.tmp.StandAloneRoomServerSetting.prototype.getRoomSetting = function() {
  return /** @type{?proto.tmp.RoomSetting} */ (
    jspb.Message.getWrapperField(this, proto.tmp.RoomSetting, 2));
};


/** @param {?proto.tmp.RoomSetting|undefined} value */
proto.tmp.StandAloneRoomServerSetting.prototype.setRoomSetting = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.tmp.StandAloneRoomServerSetting.prototype.clearRoomSetting = function() {
  this.setRoomSetting(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tmp.StandAloneRoomServerSetting.prototype.hasRoomSetting = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string backup_file = 3;
 * @return {string}
 */
proto.tmp.StandAloneRoomServerSetting.prototype.getBackupFile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.tmp.StandAloneRoomServerSetting.prototype.setBackupFile = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tmp.CreateRoomRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tmp.CreateRoomRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tmp.CreateRoomRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tmp.CreateRoomRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    roomSetting: (f = msg.getRoomSetting()) && proto.tmp.RoomSetting.toObject(includeInstance, f),
    shortDescription: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tmp.CreateRoomRequest}
 */
proto.tmp.CreateRoomRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tmp.CreateRoomRequest;
  return proto.tmp.CreateRoomRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tmp.CreateRoomRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tmp.CreateRoomRequest}
 */
proto.tmp.CreateRoomRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomId(value);
      break;
    case 2:
      var value = new proto.tmp.RoomSetting;
      reader.readMessage(value,proto.tmp.RoomSetting.deserializeBinaryFromReader);
      msg.setRoomSetting(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setShortDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tmp.CreateRoomRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tmp.CreateRoomRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tmp.CreateRoomRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tmp.CreateRoomRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRoomSetting();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.tmp.RoomSetting.serializeBinaryToWriter
    );
  }
  f = message.getShortDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string room_id = 1;
 * @return {string}
 */
proto.tmp.CreateRoomRequest.prototype.getRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.tmp.CreateRoomRequest.prototype.setRoomId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional RoomSetting room_setting = 2;
 * @return {?proto.tmp.RoomSetting}
 */
proto.tmp.CreateRoomRequest.prototype.getRoomSetting = function() {
  return /** @type{?proto.tmp.RoomSetting} */ (
    jspb.Message.getWrapperField(this, proto.tmp.RoomSetting, 2));
};


/** @param {?proto.tmp.RoomSetting|undefined} value */
proto.tmp.CreateRoomRequest.prototype.setRoomSetting = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.tmp.CreateRoomRequest.prototype.clearRoomSetting = function() {
  this.setRoomSetting(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tmp.CreateRoomRequest.prototype.hasRoomSetting = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string short_description = 3;
 * @return {string}
 */
proto.tmp.CreateRoomRequest.prototype.getShortDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.tmp.CreateRoomRequest.prototype.setShortDescription = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tmp.CreateRoomResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tmp.CreateRoomResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tmp.CreateRoomResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tmp.CreateRoomResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tmp.CreateRoomResponse}
 */
proto.tmp.CreateRoomResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tmp.CreateRoomResponse;
  return proto.tmp.CreateRoomResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tmp.CreateRoomResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tmp.CreateRoomResponse}
 */
proto.tmp.CreateRoomResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tmp.CreateRoomResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tmp.CreateRoomResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tmp.CreateRoomResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tmp.CreateRoomResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tmp.DeleteRoomRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tmp.DeleteRoomRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tmp.DeleteRoomRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tmp.DeleteRoomRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tmp.DeleteRoomRequest}
 */
proto.tmp.DeleteRoomRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tmp.DeleteRoomRequest;
  return proto.tmp.DeleteRoomRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tmp.DeleteRoomRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tmp.DeleteRoomRequest}
 */
proto.tmp.DeleteRoomRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tmp.DeleteRoomRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tmp.DeleteRoomRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tmp.DeleteRoomRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tmp.DeleteRoomRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string room_id = 1;
 * @return {string}
 */
proto.tmp.DeleteRoomRequest.prototype.getRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.tmp.DeleteRoomRequest.prototype.setRoomId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tmp.DeleteRoomResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tmp.DeleteRoomResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tmp.DeleteRoomResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tmp.DeleteRoomResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tmp.DeleteRoomResponse}
 */
proto.tmp.DeleteRoomResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tmp.DeleteRoomResponse;
  return proto.tmp.DeleteRoomResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tmp.DeleteRoomResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tmp.DeleteRoomResponse}
 */
proto.tmp.DeleteRoomResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tmp.DeleteRoomResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tmp.DeleteRoomResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tmp.DeleteRoomResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tmp.DeleteRoomResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tmp.ListRoomRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tmp.ListRoomRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tmp.ListRoomRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tmp.ListRoomRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tmp.ListRoomRequest}
 */
proto.tmp.ListRoomRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tmp.ListRoomRequest;
  return proto.tmp.ListRoomRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tmp.ListRoomRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tmp.ListRoomRequest}
 */
proto.tmp.ListRoomRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tmp.ListRoomRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tmp.ListRoomRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tmp.ListRoomRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tmp.ListRoomRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tmp.ListRoomResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tmp.ListRoomResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tmp.ListRoomResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tmp.ListRoomResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tmp.ListRoomResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomsList: jspb.Message.toObjectList(msg.getRoomsList(),
    proto.tmp.RoomSummary.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tmp.ListRoomResponse}
 */
proto.tmp.ListRoomResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tmp.ListRoomResponse;
  return proto.tmp.ListRoomResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tmp.ListRoomResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tmp.ListRoomResponse}
 */
proto.tmp.ListRoomResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tmp.RoomSummary;
      reader.readMessage(value,proto.tmp.RoomSummary.deserializeBinaryFromReader);
      msg.addRooms(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tmp.ListRoomResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tmp.ListRoomResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tmp.ListRoomResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tmp.ListRoomResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.tmp.RoomSummary.serializeBinaryToWriter
    );
  }
};


/**
 * repeated RoomSummary rooms = 1;
 * @return {!Array<!proto.tmp.RoomSummary>}
 */
proto.tmp.ListRoomResponse.prototype.getRoomsList = function() {
  return /** @type{!Array<!proto.tmp.RoomSummary>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tmp.RoomSummary, 1));
};


/** @param {!Array<!proto.tmp.RoomSummary>} value */
proto.tmp.ListRoomResponse.prototype.setRoomsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.tmp.RoomSummary=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tmp.RoomSummary}
 */
proto.tmp.ListRoomResponse.prototype.addRooms = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.tmp.RoomSummary, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.tmp.ListRoomResponse.prototype.clearRoomsList = function() {
  this.setRoomsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tmp.RoomSummary.prototype.toObject = function(opt_includeInstance) {
  return proto.tmp.RoomSummary.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tmp.RoomSummary} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tmp.RoomSummary.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    setting: (f = msg.getSetting()) && proto.tmp.RoomSetting.toObject(includeInstance, f),
    shortDescription: jspb.Message.getFieldWithDefault(msg, 3, ""),
    historySummary: (f = msg.getHistorySummary()) && proto.tmp.RoomSummary.HistorySummary.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tmp.RoomSummary}
 */
proto.tmp.RoomSummary.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tmp.RoomSummary;
  return proto.tmp.RoomSummary.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tmp.RoomSummary} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tmp.RoomSummary}
 */
proto.tmp.RoomSummary.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.tmp.RoomSetting;
      reader.readMessage(value,proto.tmp.RoomSetting.deserializeBinaryFromReader);
      msg.setSetting(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setShortDescription(value);
      break;
    case 4:
      var value = new proto.tmp.RoomSummary.HistorySummary;
      reader.readMessage(value,proto.tmp.RoomSummary.HistorySummary.deserializeBinaryFromReader);
      msg.setHistorySummary(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tmp.RoomSummary.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tmp.RoomSummary.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tmp.RoomSummary} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tmp.RoomSummary.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSetting();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.tmp.RoomSetting.serializeBinaryToWriter
    );
  }
  f = message.getShortDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getHistorySummary();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.tmp.RoomSummary.HistorySummary.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tmp.RoomSummary.HistorySummary.prototype.toObject = function(opt_includeInstance) {
  return proto.tmp.RoomSummary.HistorySummary.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tmp.RoomSummary.HistorySummary} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tmp.RoomSummary.HistorySummary.toObject = function(includeInstance, msg) {
  var f, obj = {
    activeConnectionSize: jspb.Message.getFieldWithDefault(msg, 4, 0),
    commandSize: jspb.Message.getFieldWithDefault(msg, 5, 0),
    commandMemorySize: jspb.Message.getFieldWithDefault(msg, 6, 0),
    tickSize: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tmp.RoomSummary.HistorySummary}
 */
proto.tmp.RoomSummary.HistorySummary.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tmp.RoomSummary.HistorySummary;
  return proto.tmp.RoomSummary.HistorySummary.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tmp.RoomSummary.HistorySummary} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tmp.RoomSummary.HistorySummary}
 */
proto.tmp.RoomSummary.HistorySummary.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setActiveConnectionSize(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCommandSize(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCommandMemorySize(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTickSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tmp.RoomSummary.HistorySummary.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tmp.RoomSummary.HistorySummary.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tmp.RoomSummary.HistorySummary} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tmp.RoomSummary.HistorySummary.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActiveConnectionSize();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getCommandSize();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getCommandMemorySize();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getTickSize();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
};


/**
 * optional int32 active_connection_size = 4;
 * @return {number}
 */
proto.tmp.RoomSummary.HistorySummary.prototype.getActiveConnectionSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.tmp.RoomSummary.HistorySummary.prototype.setActiveConnectionSize = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 command_size = 5;
 * @return {number}
 */
proto.tmp.RoomSummary.HistorySummary.prototype.getCommandSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.tmp.RoomSummary.HistorySummary.prototype.setCommandSize = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 command_memory_size = 6;
 * @return {number}
 */
proto.tmp.RoomSummary.HistorySummary.prototype.getCommandMemorySize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.tmp.RoomSummary.HistorySummary.prototype.setCommandMemorySize = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 tick_size = 7;
 * @return {number}
 */
proto.tmp.RoomSummary.HistorySummary.prototype.getTickSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.tmp.RoomSummary.HistorySummary.prototype.setTickSize = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.tmp.RoomSummary.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.tmp.RoomSummary.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional RoomSetting setting = 2;
 * @return {?proto.tmp.RoomSetting}
 */
proto.tmp.RoomSummary.prototype.getSetting = function() {
  return /** @type{?proto.tmp.RoomSetting} */ (
    jspb.Message.getWrapperField(this, proto.tmp.RoomSetting, 2));
};


/** @param {?proto.tmp.RoomSetting|undefined} value */
proto.tmp.RoomSummary.prototype.setSetting = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.tmp.RoomSummary.prototype.clearSetting = function() {
  this.setSetting(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tmp.RoomSummary.prototype.hasSetting = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string short_description = 3;
 * @return {string}
 */
proto.tmp.RoomSummary.prototype.getShortDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.tmp.RoomSummary.prototype.setShortDescription = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional HistorySummary history_summary = 4;
 * @return {?proto.tmp.RoomSummary.HistorySummary}
 */
proto.tmp.RoomSummary.prototype.getHistorySummary = function() {
  return /** @type{?proto.tmp.RoomSummary.HistorySummary} */ (
    jspb.Message.getWrapperField(this, proto.tmp.RoomSummary.HistorySummary, 4));
};


/** @param {?proto.tmp.RoomSummary.HistorySummary|undefined} value */
proto.tmp.RoomSummary.prototype.setHistorySummary = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.tmp.RoomSummary.prototype.clearHistorySummary = function() {
  this.setHistorySummary(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tmp.RoomSummary.prototype.hasHistorySummary = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.tmp.DebugRequest.oneofGroups_ = [[5,6]];

/**
 * @enum {number}
 */
proto.tmp.DebugRequest.OoCase = {
  OO_NOT_SET: 0,
  OI32: 5,
  OI64: 6
};

/**
 * @return {proto.tmp.DebugRequest.OoCase}
 */
proto.tmp.DebugRequest.prototype.getOoCase = function() {
  return /** @type {proto.tmp.DebugRequest.OoCase} */(jspb.Message.computeOneofCase(this, proto.tmp.DebugRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tmp.DebugRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tmp.DebugRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tmp.DebugRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tmp.DebugRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    b: msg.getB_asB64(),
    s: jspb.Message.getFieldWithDefault(msg, 2, ""),
    i32: jspb.Message.getFieldWithDefault(msg, 3, 0),
    i64: jspb.Message.getFieldWithDefault(msg, 4, 0),
    oi32: jspb.Message.getFieldWithDefault(msg, 5, 0),
    oi64: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tmp.DebugRequest}
 */
proto.tmp.DebugRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tmp.DebugRequest;
  return proto.tmp.DebugRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tmp.DebugRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tmp.DebugRequest}
 */
proto.tmp.DebugRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setB(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setS(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setI32(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setI64(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOi32(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOi64(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tmp.DebugRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tmp.DebugRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tmp.DebugRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tmp.DebugRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getB_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getS();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getI32();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getI64();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint64(
      6,
      f
    );
  }
};


/**
 * optional bytes b = 1;
 * @return {!(string|Uint8Array)}
 */
proto.tmp.DebugRequest.prototype.getB = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes b = 1;
 * This is a type-conversion wrapper around `getB()`
 * @return {string}
 */
proto.tmp.DebugRequest.prototype.getB_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getB()));
};


/**
 * optional bytes b = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getB()`
 * @return {!Uint8Array}
 */
proto.tmp.DebugRequest.prototype.getB_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getB()));
};


/** @param {!(string|Uint8Array)} value */
proto.tmp.DebugRequest.prototype.setB = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string s = 2;
 * @return {string}
 */
proto.tmp.DebugRequest.prototype.getS = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.tmp.DebugRequest.prototype.setS = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 i32 = 3;
 * @return {number}
 */
proto.tmp.DebugRequest.prototype.getI32 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.tmp.DebugRequest.prototype.setI32 = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 i64 = 4;
 * @return {number}
 */
proto.tmp.DebugRequest.prototype.getI64 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.tmp.DebugRequest.prototype.setI64 = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 oi32 = 5;
 * @return {number}
 */
proto.tmp.DebugRequest.prototype.getOi32 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.tmp.DebugRequest.prototype.setOi32 = function(value) {
  jspb.Message.setOneofField(this, 5, proto.tmp.DebugRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 */
proto.tmp.DebugRequest.prototype.clearOi32 = function() {
  jspb.Message.setOneofField(this, 5, proto.tmp.DebugRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tmp.DebugRequest.prototype.hasOi32 = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint64 oi64 = 6;
 * @return {number}
 */
proto.tmp.DebugRequest.prototype.getOi64 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.tmp.DebugRequest.prototype.setOi64 = function(value) {
  jspb.Message.setOneofField(this, 6, proto.tmp.DebugRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 */
proto.tmp.DebugRequest.prototype.clearOi64 = function() {
  jspb.Message.setOneofField(this, 6, proto.tmp.DebugRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tmp.DebugRequest.prototype.hasOi64 = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.tmp.DebugResponse.oneofGroups_ = [[5,6]];

/**
 * @enum {number}
 */
proto.tmp.DebugResponse.OoCase = {
  OO_NOT_SET: 0,
  OI32: 5,
  OI64: 6
};

/**
 * @return {proto.tmp.DebugResponse.OoCase}
 */
proto.tmp.DebugResponse.prototype.getOoCase = function() {
  return /** @type {proto.tmp.DebugResponse.OoCase} */(jspb.Message.computeOneofCase(this, proto.tmp.DebugResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tmp.DebugResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tmp.DebugResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tmp.DebugResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tmp.DebugResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    b: msg.getB_asB64(),
    s: jspb.Message.getFieldWithDefault(msg, 2, ""),
    i32: jspb.Message.getFieldWithDefault(msg, 3, 0),
    i64: jspb.Message.getFieldWithDefault(msg, 4, 0),
    oi32: jspb.Message.getFieldWithDefault(msg, 5, 0),
    oi64: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tmp.DebugResponse}
 */
proto.tmp.DebugResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tmp.DebugResponse;
  return proto.tmp.DebugResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tmp.DebugResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tmp.DebugResponse}
 */
proto.tmp.DebugResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setB(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setS(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setI32(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setI64(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOi32(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOi64(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tmp.DebugResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tmp.DebugResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tmp.DebugResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tmp.DebugResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getB_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getS();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getI32();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getI64();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint64(
      6,
      f
    );
  }
};


/**
 * optional bytes b = 1;
 * @return {!(string|Uint8Array)}
 */
proto.tmp.DebugResponse.prototype.getB = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes b = 1;
 * This is a type-conversion wrapper around `getB()`
 * @return {string}
 */
proto.tmp.DebugResponse.prototype.getB_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getB()));
};


/**
 * optional bytes b = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getB()`
 * @return {!Uint8Array}
 */
proto.tmp.DebugResponse.prototype.getB_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getB()));
};


/** @param {!(string|Uint8Array)} value */
proto.tmp.DebugResponse.prototype.setB = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string s = 2;
 * @return {string}
 */
proto.tmp.DebugResponse.prototype.getS = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.tmp.DebugResponse.prototype.setS = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 i32 = 3;
 * @return {number}
 */
proto.tmp.DebugResponse.prototype.getI32 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.tmp.DebugResponse.prototype.setI32 = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 i64 = 4;
 * @return {number}
 */
proto.tmp.DebugResponse.prototype.getI64 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.tmp.DebugResponse.prototype.setI64 = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 oi32 = 5;
 * @return {number}
 */
proto.tmp.DebugResponse.prototype.getOi32 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.tmp.DebugResponse.prototype.setOi32 = function(value) {
  jspb.Message.setOneofField(this, 5, proto.tmp.DebugResponse.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 */
proto.tmp.DebugResponse.prototype.clearOi32 = function() {
  jspb.Message.setOneofField(this, 5, proto.tmp.DebugResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tmp.DebugResponse.prototype.hasOi32 = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint64 oi64 = 6;
 * @return {number}
 */
proto.tmp.DebugResponse.prototype.getOi64 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.tmp.DebugResponse.prototype.setOi64 = function(value) {
  jspb.Message.setOneofField(this, 6, proto.tmp.DebugResponse.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 */
proto.tmp.DebugResponse.prototype.clearOi64 = function() {
  jspb.Message.setOneofField(this, 6, proto.tmp.DebugResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tmp.DebugResponse.prototype.hasOi64 = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tmp.RoomSetting.prototype.toObject = function(opt_includeInstance) {
  return proto.tmp.RoomSetting.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tmp.RoomSetting} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tmp.RoomSetting.toObject = function(includeInstance, msg) {
  var f, obj = {
    tick: (f = msg.getTick()) && proto.tmp.TickSetting.toObject(includeInstance, f),
    endOfLife: (f = msg.getEndOfLife()) && proto.tmp.EndOfLifeSetting.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tmp.RoomSetting}
 */
proto.tmp.RoomSetting.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tmp.RoomSetting;
  return proto.tmp.RoomSetting.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tmp.RoomSetting} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tmp.RoomSetting}
 */
proto.tmp.RoomSetting.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tmp.TickSetting;
      reader.readMessage(value,proto.tmp.TickSetting.deserializeBinaryFromReader);
      msg.setTick(value);
      break;
    case 2:
      var value = new proto.tmp.EndOfLifeSetting;
      reader.readMessage(value,proto.tmp.EndOfLifeSetting.deserializeBinaryFromReader);
      msg.setEndOfLife(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tmp.RoomSetting.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tmp.RoomSetting.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tmp.RoomSetting} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tmp.RoomSetting.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTick();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.tmp.TickSetting.serializeBinaryToWriter
    );
  }
  f = message.getEndOfLife();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.tmp.EndOfLifeSetting.serializeBinaryToWriter
    );
  }
};


/**
 * optional TickSetting tick = 1;
 * @return {?proto.tmp.TickSetting}
 */
proto.tmp.RoomSetting.prototype.getTick = function() {
  return /** @type{?proto.tmp.TickSetting} */ (
    jspb.Message.getWrapperField(this, proto.tmp.TickSetting, 1));
};


/** @param {?proto.tmp.TickSetting|undefined} value */
proto.tmp.RoomSetting.prototype.setTick = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.tmp.RoomSetting.prototype.clearTick = function() {
  this.setTick(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tmp.RoomSetting.prototype.hasTick = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional EndOfLifeSetting end_of_life = 2;
 * @return {?proto.tmp.EndOfLifeSetting}
 */
proto.tmp.RoomSetting.prototype.getEndOfLife = function() {
  return /** @type{?proto.tmp.EndOfLifeSetting} */ (
    jspb.Message.getWrapperField(this, proto.tmp.EndOfLifeSetting, 2));
};


/** @param {?proto.tmp.EndOfLifeSetting|undefined} value */
proto.tmp.RoomSetting.prototype.setEndOfLife = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.tmp.RoomSetting.prototype.clearEndOfLife = function() {
  this.setEndOfLife(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tmp.RoomSetting.prototype.hasEndOfLife = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tmp.TickSetting.prototype.toObject = function(opt_includeInstance) {
  return proto.tmp.TickSetting.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tmp.TickSetting} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tmp.TickSetting.toObject = function(includeInstance, msg) {
  var f, obj = {
    size: jspb.Message.getFieldWithDefault(msg, 1, 0),
    frequencyNanoseconds: jspb.Message.getFieldWithDefault(msg, 2, 0),
    alwaysActive: jspb.Message.getFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tmp.TickSetting}
 */
proto.tmp.TickSetting.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tmp.TickSetting;
  return proto.tmp.TickSetting.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tmp.TickSetting} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tmp.TickSetting}
 */
proto.tmp.TickSetting.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSize(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFrequencyNanoseconds(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAlwaysActive(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tmp.TickSetting.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tmp.TickSetting.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tmp.TickSetting} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tmp.TickSetting.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSize();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getFrequencyNanoseconds();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getAlwaysActive();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional uint32 size = 1;
 * @return {number}
 */
proto.tmp.TickSetting.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.tmp.TickSetting.prototype.setSize = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 frequency_nanoseconds = 2;
 * @return {number}
 */
proto.tmp.TickSetting.prototype.getFrequencyNanoseconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.tmp.TickSetting.prototype.setFrequencyNanoseconds = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool always_active = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.tmp.TickSetting.prototype.getAlwaysActive = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.tmp.TickSetting.prototype.setAlwaysActive = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tmp.EndOfLifeSetting.prototype.toObject = function(opt_includeInstance) {
  return proto.tmp.EndOfLifeSetting.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tmp.EndOfLifeSetting} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tmp.EndOfLifeSetting.toObject = function(includeInstance, msg) {
  var f, obj = {
    maxDuration: jspb.Message.getFieldWithDefault(msg, 1, 0),
    maxDurationWhileIdle: jspb.Message.getFieldWithDefault(msg, 2, 0),
    closeWhenAllWriterDisconnected: jspb.Message.getFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tmp.EndOfLifeSetting}
 */
proto.tmp.EndOfLifeSetting.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tmp.EndOfLifeSetting;
  return proto.tmp.EndOfLifeSetting.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tmp.EndOfLifeSetting} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tmp.EndOfLifeSetting}
 */
proto.tmp.EndOfLifeSetting.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxDuration(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxDurationWhileIdle(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCloseWhenAllWriterDisconnected(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tmp.EndOfLifeSetting.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tmp.EndOfLifeSetting.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tmp.EndOfLifeSetting} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tmp.EndOfLifeSetting.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMaxDuration();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getMaxDurationWhileIdle();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getCloseWhenAllWriterDisconnected();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional uint64 max_duration = 1;
 * @return {number}
 */
proto.tmp.EndOfLifeSetting.prototype.getMaxDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.tmp.EndOfLifeSetting.prototype.setMaxDuration = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 max_duration_while_idle = 2;
 * @return {number}
 */
proto.tmp.EndOfLifeSetting.prototype.getMaxDurationWhileIdle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.tmp.EndOfLifeSetting.prototype.setMaxDurationWhileIdle = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool close_when_all_writer_disconnected = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.tmp.EndOfLifeSetting.prototype.getCloseWhenAllWriterDisconnected = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.tmp.EndOfLifeSetting.prototype.setCloseWhenAllWriterDisconnected = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


goog.object.extend(exports, proto.tmp);
