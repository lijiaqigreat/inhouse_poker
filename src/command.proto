syntax = "proto3";
package tmp;

message Commands {
  repeated Command commands = 1;
}
/* a message that server can send to clients */
message Command {
  oneof command {
    TickCommand tick_command = 1;
    IdCommand id_command = 2;
    WriterCommand writer_command = 3;
  }
}

/** A time update, representing a unit time has passed. */
message TickCommand {
  // current time

  bytes random_seed = 1;
}

/**
 * Client has connected or disconnected or changed id.
 */
message IdCommand {
  /** Id that has been removed. If empty, it means a new client id has joined. */
  string old_id = 1;
  /** Id that has been added. If empty, it means a client has disconnected. */
  string new_id = 2;
}

/**
 * Broadcast of a message from a client.
 */
message WriterCommand {
  /** Id of client */
  string id = 1;
  
  /** Custom message sent by a client. */
  bytes command = 2;
}

message StandAloneRoomServerSetting {
  int32 port = 1;
  RoomSetting room_setting = 2;
  string backup_file = 3;
}

service RoomService {
  /* rpc debug(DebugRequest) returns (DebugResponse) {} */
  rpc ListRoom(ListRoomRequest) returns (ListRoomResponse) {}
  rpc CreateRoom(CreateRoomRequest) returns (CreateRoomResponse) {}
  rpc DeleteRoom(DeleteRoomRequest) returns (DeleteRoomResponse) {}
}

message CreateRoomRequest {
  string room_id = 1;
  RoomSetting room_setting = 2;
  string short_description = 3;
}

message CreateRoomResponse {
}

message DeleteRoomRequest {
  string room_id = 1;
}

message DeleteRoomResponse {
}

message ListRoomRequest {
}

message ListRoomResponse {
  repeated RoomSummary rooms = 1;
}

message RoomSummary {
  string id = 1;
  RoomSetting setting = 2;
  string short_description = 3;
  message HistorySummary {
    int32 active_connection_size = 4;
    int64 command_size = 5;
    int64 command_memory_size = 6;
    int64 tick_size = 7;
  }
  HistorySummary history_summary = 4;
}

message DebugRequest {
  bytes b = 1;
  string s = 2;
  uint32 i32 = 3;
  uint64 i64 = 4;
  oneof oo {
    uint32 oi32 = 5;
    uint64 oi64 = 6;
  }
}

message DebugResponse {
  bytes b = 1;
  string s = 2;
  uint32 i32 = 3;
  uint64 i64 = 4;
  oneof oo {
    uint32 oi32 = 5;
    uint64 oi64 = 6;
  }
}

// Minimal info needed to control server's behavior.
message RoomSetting {
  TickSetting tick = 1;
  EndOfLifeSetting end_of_life = 2;
}

// How server should send TickCommand
message TickSetting {
  // number of bytes in random_seed in TickCommand
  uint32 size = 1;
  uint64 frequency_nanoseconds = 2;
  bool always_active = 3;
}

// When server should stop
message EndOfLifeSetting {
  // Stop after n nanoseconds, never stop if equals 0
  uint64 max_duration = 1;
  // Stop after n nanoseconds without user message or user join, never stop if equals 0
  uint64 max_duration_while_idle = 2;
  // Stop after all writer disconnected.
  bool close_when_all_writer_disconnected = 3;
}

/* message UpdateSetting { */
/*   bool setting = 1; */
/*   bool write_identity = 2; */
/*   bool read_identity = 3; */
/* } */

/* message Permission { */
/*   // empty means everyone is allowed */
/*   repeated Identity allowed_identities = 1; */
 
/*   // 0 means everyone is allowed */
/*   uint32 max_user =2; */
/* } */

/* message Identity { */
/*   oneof identity { */
/*     CryptoIdentity crypto_identity = 1; */
/*   } */
/* } */

/* message CryptoIdentity { */
/*   enum Type { */
/*     unspecified = 0; */
/*     curve_25519 = 1; */
/*   } */
/*   Type type = 1; */
/*   string base64 = 2; */
/* } */

/* message PublicIdentity { */
/*   string name = 1; */
/* } */
